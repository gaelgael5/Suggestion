//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Suggestion.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Suggestion.SuggestionParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SuggestionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, AND=15, ANDALSO=16, OR=17, 
		XOR=18, NOT=19, K_ALL=20, K_SHOW=21, K_WHERE=22, K_WITH=23, K_FACETS=24, 
		K_ORDER=25, K_BY=26, DIGIT=27, IDENTIFIER=28, COMMENT_INPUT=29, LINE_COMMENT=30, 
		Char_literal=31, String_literal=32, Datetime=33;
	public const int
		RULE_stmt_list = 0, RULE_stmt_line = 1, RULE_stmt_show = 2, RULE_stmt_Set_globalParameter = 3, 
		RULE_stmt_Set_globalParameter_literal = 4, RULE_stmt_Del_globalParameter = 5, 
		RULE_select_stmt = 6, RULE_where_stmt = 7, RULE_order_stmt = 8, RULE_facet_stmt = 9, 
		RULE_function_stmt = 10, RULE_function_args_stmt = 11, RULE_identifier_stmt = 12, 
		RULE_bind_parameter = 13, RULE_constant = 14, RULE_variable = 15, RULE_numeric_literal = 16, 
		RULE_numeric_integer_literal = 17, RULE_numeric_double_literal = 18, RULE_binary_operator = 19, 
		RULE_unary_operator = 20, RULE_expr = 21, RULE_sub_expr = 22, RULE_unary_operator_expr = 23, 
		RULE_array_expr = 24, RULE_literal = 25, RULE_function_name = 26, RULE_any_name = 27, 
		RULE_string_literal_expr = 28, RULE_char_literal_expr = 29, RULE_datetime_expr = 30, 
		RULE_datetime_mask = 31, RULE_datetime_culture = 32;
	public static readonly string[] ruleNames = {
		"stmt_list", "stmt_line", "stmt_show", "stmt_Set_globalParameter", "stmt_Set_globalParameter_literal", 
		"stmt_Del_globalParameter", "select_stmt", "where_stmt", "order_stmt", 
		"facet_stmt", "function_stmt", "function_args_stmt", "identifier_stmt", 
		"bind_parameter", "constant", "variable", "numeric_literal", "numeric_integer_literal", 
		"numeric_double_literal", "binary_operator", "unary_operator", "expr", 
		"sub_expr", "unary_operator_expr", "array_expr", "literal", "function_name", 
		"any_name", "string_literal_expr", "char_literal_expr", "datetime_expr", 
		"datetime_mask", "datetime_culture"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'SET'", "'='", "'DEL'", "','", "'('", "')'", "'.'", "':'", 
		"'$'", "'@'", "'-'", "'['", "']'", "'&'", "'&&'", "'|'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "AND", "ANDALSO", "OR", "XOR", "NOT", "K_ALL", "K_SHOW", 
		"K_WHERE", "K_WITH", "K_FACETS", "K_ORDER", "K_BY", "DIGIT", "IDENTIFIER", 
		"COMMENT_INPUT", "LINE_COMMENT", "Char_literal", "String_literal", "Datetime"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Suggestion.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SuggestionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SuggestionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SuggestionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Stmt_listContext : ParserRuleContext {
		public Stmt_lineContext[] stmt_line() {
			return GetRuleContexts<Stmt_lineContext>();
		}
		public Stmt_lineContext stmt_line(int i) {
			return GetRuleContext<Stmt_lineContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 66; Match(T__0);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72; stmt_line();
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 73; Match(T__0);
						}
						}
						State = 76;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					State = 78; stmt_line();
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 84; Match(T__0);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_lineContext : ParserRuleContext {
		public Stmt_showContext stmt_show() {
			return GetRuleContext<Stmt_showContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Stmt_Set_globalParameterContext stmt_Set_globalParameter() {
			return GetRuleContext<Stmt_Set_globalParameterContext>(0);
		}
		public Stmt_Del_globalParameterContext stmt_Del_globalParameter() {
			return GetRuleContext<Stmt_Del_globalParameterContext>(0);
		}
		public Stmt_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_lineContext stmt_line() {
		Stmt_lineContext _localctx = new Stmt_lineContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_line);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SHOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; stmt_show();
				}
				break;
			case K_WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; select_stmt();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; stmt_Set_globalParameter();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; stmt_Del_globalParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_showContext : ParserRuleContext {
		public ITerminalNode K_SHOW() { return GetToken(SuggestionParser.K_SHOW, 0); }
		public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		public Stmt_showContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_show; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_show(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_showContext stmt_show() {
		Stmt_showContext _localctx = new Stmt_showContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt_show);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(K_SHOW);
			State = 97; any_name();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 98; any_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Set_globalParameterContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Stmt_Set_globalParameter_literalContext stmt_Set_globalParameter_literal() {
			return GetRuleContext<Stmt_Set_globalParameter_literalContext>(0);
		}
		public Stmt_Set_globalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Set_globalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Set_globalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Set_globalParameterContext stmt_Set_globalParameter() {
		Stmt_Set_globalParameterContext _localctx = new Stmt_Set_globalParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt_Set_globalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__1);
			State = 102; any_name();
			State = 103; Match(T__2);
			State = 104; stmt_Set_globalParameter_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Set_globalParameter_literalContext : ParserRuleContext {
		public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		public String_literal_exprContext string_literal_expr() {
			return GetRuleContext<String_literal_exprContext>(0);
		}
		public Char_literal_exprContext char_literal_expr() {
			return GetRuleContext<Char_literal_exprContext>(0);
		}
		public Datetime_exprContext datetime_expr() {
			return GetRuleContext<Datetime_exprContext>(0);
		}
		public Stmt_Set_globalParameter_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Set_globalParameter_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Set_globalParameter_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Set_globalParameter_literalContext stmt_Set_globalParameter_literal() {
		Stmt_Set_globalParameter_literalContext _localctx = new Stmt_Set_globalParameter_literalContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt_Set_globalParameter_literal);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case DIGIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; numeric_literal();
				}
				break;
			case String_literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; string_literal_expr();
				}
				break;
			case Char_literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; char_literal_expr();
				}
				break;
			case Datetime:
				EnterOuterAlt(_localctx, 4);
				{
				State = 109; datetime_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Del_globalParameterContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Stmt_Del_globalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Del_globalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Del_globalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Del_globalParameterContext stmt_Del_globalParameter() {
		Stmt_Del_globalParameterContext _localctx = new Stmt_Del_globalParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_stmt_Del_globalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__3);
			State = 113; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		public Order_stmtContext order_stmt() {
			return GetRuleContext<Order_stmtContext>(0);
		}
		public Facet_stmtContext facet_stmt() {
			return GetRuleContext<Facet_stmtContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; where_stmt();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 116; order_stmt();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 119; facet_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(SuggestionParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(SuggestionParser.K_ALL, 0); }
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(K_WHERE);
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case NOT:
			case DIGIT:
			case IDENTIFIER:
			case Char_literal:
			case String_literal:
			case Datetime:
				{
				State = 123; expr(0);
				}
				break;
			case K_ALL:
				{
				State = 124; Match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_stmtContext : ParserRuleContext {
		public ITerminalNode K_ORDER() { return GetToken(SuggestionParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SuggestionParser.K_BY, 0); }
		public Identifier_stmtContext identifier_stmt() {
			return GetRuleContext<Identifier_stmtContext>(0);
		}
		public Order_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_stmtContext order_stmt() {
		Order_stmtContext _localctx = new Order_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_order_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(K_ORDER);
			State = 128; Match(K_BY);
			State = 129; identifier_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Facet_stmtContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(SuggestionParser.K_WITH, 0); }
		public ITerminalNode K_FACETS() { return GetToken(SuggestionParser.K_FACETS, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Facet_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facet_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Facet_stmtContext facet_stmt() {
		Facet_stmtContext _localctx = new Facet_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_facet_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(K_WITH);
			State = 132; Match(K_FACETS);
			State = 133; Match(IDENTIFIER);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 134; Match(T__4);
				State = 135; Match(IDENTIFIER);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_stmtContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_args_stmtContext function_args_stmt() {
			return GetRuleContext<Function_args_stmtContext>(0);
		}
		public Function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_stmtContext function_stmt() {
		Function_stmtContext _localctx = new Function_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; function_name();
			State = 142; Match(T__5);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << NOT) | (1L << DIGIT) | (1L << IDENTIFIER) | (1L << Char_literal) | (1L << String_literal) | (1L << Datetime))) != 0)) {
				{
				State = 143; function_args_stmt();
				}
			}

			State = 146; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_args_stmtContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_args_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_args_stmtContext function_args_stmt() {
		Function_args_stmtContext _localctx = new Function_args_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_args_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; expr(0);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 149; Match(T__4);
				State = 150; expr(0);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_stmtContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Identifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_stmtContext identifier_stmt() {
		Identifier_stmtContext _localctx = new Identifier_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifier_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IDENTIFIER);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 157; Match(T__7);
				State = 158; Match(IDENTIFIER);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameterContext bind_parameter() {
		Bind_parameterContext _localctx = new Bind_parameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_bind_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(T__8);
			State = 165; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__9);
			State = 168; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__10);
			State = 171; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		public Numeric_double_literalContext numeric_double_literal() {
			return GetRuleContext<Numeric_double_literalContext>(0);
		}
		public Numeric_integer_literalContext numeric_integer_literal() {
			return GetRuleContext<Numeric_integer_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 32, RULE_numeric_literal);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; numeric_double_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; numeric_integer_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_integer_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_integer_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_integer_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_integer_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_integer_literalContext numeric_integer_literal() {
		Numeric_integer_literalContext _localctx = new Numeric_integer_literalContext(Context, State);
		EnterRule(_localctx, 34, RULE_numeric_integer_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 177; Match(T__11);
				}
			}

			State = 181;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 180; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_double_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_double_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_double_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_double_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_double_literalContext numeric_double_literal() {
		Numeric_double_literalContext _localctx = new Numeric_double_literalContext(Context, State);
		EnterRule(_localctx, 36, RULE_numeric_double_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 185; Match(T__11);
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 188; Match(DIGIT);
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 193; Match(T__7);
			State = 195;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 194; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SuggestionParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SuggestionParser.OR, 0); }
		public ITerminalNode ANDALSO() { return GetToken(SuggestionParser.ANDALSO, 0); }
		public ITerminalNode XOR() { return GetToken(SuggestionParser.XOR, 0); }
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ANDALSO) | (1L << OR) | (1L << XOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(SuggestionParser.NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Sub_exprContext sub_expr() {
			return GetRuleContext<Sub_exprContext>(0);
		}
		public Unary_operator_exprContext unary_operator_expr() {
			return GetRuleContext<Unary_operator_exprContext>(0);
		}
		public Function_stmtContext function_stmt() {
			return GetRuleContext<Function_stmtContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case T__10:
			case T__11:
			case DIGIT:
			case Char_literal:
			case String_literal:
			case Datetime:
				{
				State = 204; literal();
				}
				break;
			case T__12:
				{
				State = 205; array_expr();
				}
				break;
			case T__8:
				{
				State = 206; bind_parameter();
				}
				break;
			case T__5:
				{
				State = 207; sub_expr();
				}
				break;
			case NOT:
				{
				State = 208; unary_operator_expr();
				}
				break;
			case IDENTIFIER:
				{
				State = 209; function_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 212;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 213; binary_operator();
					State = 214; expr(3);
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Sub_exprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Sub_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_exprContext sub_expr() {
		Sub_exprContext _localctx = new Sub_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_sub_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__5);
			State = 222; expr(0);
			State = 223; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_exprContext : ParserRuleContext {
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Unary_operator_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_exprContext unary_operator_expr() {
		Unary_operator_exprContext _localctx = new Unary_operator_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_unary_operator_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; unary_operator();
			State = 226; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 48, RULE_array_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T__12);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << DIGIT) | (1L << Char_literal) | (1L << String_literal) | (1L << Datetime))) != 0)) {
				{
				State = 229; literal();
				}
			}

			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 232; Match(T__4);
				State = 233; literal();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		public String_literal_exprContext string_literal_expr() {
			return GetRuleContext<String_literal_exprContext>(0);
		}
		public Char_literal_exprContext char_literal_expr() {
			return GetRuleContext<Char_literal_exprContext>(0);
		}
		public Datetime_exprContext datetime_expr() {
			return GetRuleContext<Datetime_exprContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_literal);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case DIGIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; numeric_literal();
				}
				break;
			case String_literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242; string_literal_expr();
				}
				break;
			case Char_literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243; char_literal_expr();
				}
				break;
			case Datetime:
				EnterOuterAlt(_localctx, 4);
				{
				State = 244; datetime_expr();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 5);
				{
				State = 245; constant();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 6);
				{
				State = 246; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 52, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_any_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literal_exprContext : ParserRuleContext {
		public ITerminalNode String_literal() { return GetToken(SuggestionParser.String_literal, 0); }
		public String_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literal_exprContext string_literal_expr() {
		String_literal_exprContext _localctx = new String_literal_exprContext(Context, State);
		EnterRule(_localctx, 56, RULE_string_literal_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(String_literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_literal_exprContext : ParserRuleContext {
		public ITerminalNode Char_literal() { return GetToken(SuggestionParser.Char_literal, 0); }
		public Char_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_literal_exprContext char_literal_expr() {
		Char_literal_exprContext _localctx = new Char_literal_exprContext(Context, State);
		EnterRule(_localctx, 58, RULE_char_literal_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(Char_literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_exprContext : ParserRuleContext {
		public ITerminalNode Datetime() { return GetToken(SuggestionParser.Datetime, 0); }
		public Datetime_maskContext datetime_mask() {
			return GetRuleContext<Datetime_maskContext>(0);
		}
		public Datetime_cultureContext datetime_culture() {
			return GetRuleContext<Datetime_cultureContext>(0);
		}
		public Datetime_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_exprContext datetime_expr() {
		Datetime_exprContext _localctx = new Datetime_exprContext(Context, State);
		EnterRule(_localctx, 60, RULE_datetime_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(Datetime);
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 258; datetime_mask();
				State = 260;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 259; datetime_culture();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_maskContext : ParserRuleContext {
		public ITerminalNode String_literal() { return GetToken(SuggestionParser.String_literal, 0); }
		public Datetime_maskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_mask; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_mask(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_maskContext datetime_mask() {
		Datetime_maskContext _localctx = new Datetime_maskContext(Context, State);
		EnterRule(_localctx, 62, RULE_datetime_mask);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(String_literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_cultureContext : ParserRuleContext {
		public ITerminalNode String_literal() { return GetToken(SuggestionParser.String_literal, 0); }
		public Datetime_cultureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_culture; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_culture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_cultureContext datetime_culture() {
		Datetime_cultureContext _localctx = new Datetime_cultureContext(Context, State);
		EnterRule(_localctx, 64, RULE_datetime_culture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(String_literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\x10F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\a', '\x2', '\x46', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'I', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 'M', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', 'N', '\x3', '\x2', '\a', '\x2', 'R', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'U', '\v', '\x2', '\x3', '\x2', '\a', 
		'\x2', 'X', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '[', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x61', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x66', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'q', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'x', '\n', '\b', '\x3', 
		'\b', '\x5', '\b', '{', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x80', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x8B', '\n', '\v', '\f', '\v', '\xE', '\v', '\x8E', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x93', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x9A', '\n', '\r', '\f', '\r', '\xE', '\r', '\x9D', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xA2', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA5', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xB2', '\n', '\x12', '\x3', '\x13', '\x5', '\x13', '\xB5', 
		'\n', '\x13', '\x3', '\x13', '\x6', '\x13', '\xB8', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', '\xB9', '\x3', '\x14', '\x5', '\x14', '\xBD', '\n', 
		'\x14', '\x3', '\x14', '\x6', '\x14', '\xC0', '\n', '\x14', '\r', '\x14', 
		'\xE', '\x14', '\xC1', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\xC6', 
		'\n', '\x14', '\r', '\x14', '\xE', '\x14', '\xC7', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\xD5', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\xDB', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\xDE', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xE9', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\a', '\x1A', '\xED', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\xF0', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\xFA', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x107', '\n', ' ', '\x5', 
		' ', '\x109', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x2', '\x3', ',', '#', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x2', '\x3', '\x3', '\x2', '\x11', 
		'\x14', '\x2', '\x114', '\x2', 'G', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x6', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'r', '\x3', '\x2', '\x2', '\x2', '\xE', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '|', '\x3', '\x2', '\x2', '\x2', '\x12', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xAC', '\x3', '\x2', '\x2', '\x2', '\"', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xB4', '\x3', '\x2', '\x2', '\x2', '&', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xC9', '\x3', '\x2', '\x2', '\x2', '*', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xD4', '\x3', '\x2', '\x2', '\x2', '.', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x38', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', ':', '\xFF', '\x3', '\x2', '\x2', '\x2', '<', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '>', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x42', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x46', '\a', '\x3', '\x2', '\x2', '\x45', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'S', '\x5', '\x4', '\x3', '\x2', 'K', 'M', '\a', '\x3', 
		'\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', '\x4', 
		'\x3', '\x2', 'Q', 'L', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'Y', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'X', '\a', '\x3', '\x2', '\x2', 'W', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', '\x61', 
		'\x5', '\x6', '\x4', '\x2', ']', '\x61', '\x5', '\xE', '\b', '\x2', '^', 
		'\x61', '\x5', '\b', '\x5', '\x2', '_', '\x61', '\x5', '\f', '\a', '\x2', 
		'`', '\\', '\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x5', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\x17', '\x2', '\x2', '\x63', '\x65', '\x5', '\x38', '\x1D', '\x2', '\x64', 
		'\x66', '\x5', '\x38', '\x1D', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\a', '\x4', '\x2', '\x2', 'h', 'i', '\x5', 
		'\x38', '\x1D', '\x2', 'i', 'j', '\a', '\x5', '\x2', '\x2', 'j', 'k', 
		'\x5', '\n', '\x6', '\x2', 'k', '\t', '\x3', '\x2', '\x2', '\x2', 'l', 
		'q', '\x5', '\"', '\x12', '\x2', 'm', 'q', '\x5', ':', '\x1E', '\x2', 
		'n', 'q', '\x5', '<', '\x1F', '\x2', 'o', 'q', '\x5', '>', ' ', '\x2', 
		'p', 'l', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', '\v', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x6', '\x2', '\x2', 
		's', 't', '\x5', '\x38', '\x1D', '\x2', 't', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x5', '\x10', '\t', '\x2', 'v', 'x', '\x5', '\x12', 
		'\n', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x5', '\x14', 
		'\v', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', 
		'\x2', '\x2', '{', '\xF', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\a', 
		'\x18', '\x2', '\x2', '}', '\x80', '\x5', ',', '\x17', '\x2', '~', '\x80', 
		'\a', '\x16', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\x1B', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x1C', '\x2', '\x2', '\x83', '\x84', '\x5', '\x1A', '\xE', '\x2', '\x84', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x19', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\x1A', '\x2', '\x2', '\x87', '\x8C', '\a', 
		'\x1E', '\x2', '\x2', '\x88', '\x89', '\a', '\a', '\x2', '\x2', '\x89', 
		'\x8B', '\a', '\x1E', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x5', '\x36', '\x1C', '\x2', '\x90', '\x92', '\a', 
		'\b', '\x2', '\x2', '\x91', '\x93', '\x5', '\x18', '\r', '\x2', '\x92', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\t', '\x2', '\x2', '\x95', '\x17', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x9B', '\x5', ',', '\x17', '\x2', '\x97', '\x98', '\a', '\a', '\x2', 
		'\x2', '\x98', '\x9A', '\x5', ',', '\x17', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\xA3', '\a', '\x1E', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\n', '\x2', '\x2', '\xA0', '\xA2', '\a', '\x1E', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'\v', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x1E', '\x2', '\x2', '\xA8', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\f', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\x1E', '\x2', '\x2', '\xAB', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\r', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x1E', '\x2', '\x2', '\xAE', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB2', '\x5', '&', '\x14', '\x2', '\xB0', '\xB2', '\x5', 
		'$', '\x13', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB5', '\a', '\xE', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\a', '\x1D', '\x2', 
		'\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBD', '\a', '\xE', '\x2', '\x2', '\xBC', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\a', '\x1D', '\x2', 
		'\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC5', '\a', '\n', '\x2', '\x2', '\xC4', '\xC6', '\a', 
		'\x1D', '\x2', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\t', '\x2', '\x2', '\x2', '\xCA', 
		')', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x15', '\x2', 
		'\x2', '\xCC', '+', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\b', 
		'\x17', '\x1', '\x2', '\xCE', '\xD5', '\x5', '\x34', '\x1B', '\x2', '\xCF', 
		'\xD5', '\x5', '\x32', '\x1A', '\x2', '\xD0', '\xD5', '\x5', '\x1C', '\xF', 
		'\x2', '\xD1', '\xD5', '\x5', '.', '\x18', '\x2', '\xD2', '\xD5', '\x5', 
		'\x30', '\x19', '\x2', '\xD3', '\xD5', '\x5', '\x16', '\f', '\x2', '\xD4', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD7', '\f', '\x4', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		'(', '\x15', '\x2', '\xD8', '\xD9', '\x5', ',', '\x17', '\x5', '\xD9', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\b', '\x2', '\x2', '\xE0', '\xE1', '\x5', 
		',', '\x17', '\x2', '\xE1', '\xE2', '\a', '\t', '\x2', '\x2', '\xE2', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x5', '*', '\x16', '\x2', 
		'\xE4', '\xE5', '\x5', ',', '\x17', '\x2', '\xE5', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE8', '\a', '\xF', '\x2', '\x2', '\xE7', '\xE9', 
		'\x5', '\x34', '\x1B', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\a', '\a', '\x2', '\x2', '\xEB', '\xED', 
		'\x5', '\x34', '\x1B', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF2', '\a', '\x10', '\x2', '\x2', '\xF2', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xFA', '\x5', '\"', '\x12', '\x2', '\xF4', '\xFA', 
		'\x5', ':', '\x1E', '\x2', '\xF5', '\xFA', '\x5', '<', '\x1F', '\x2', 
		'\xF6', '\xFA', '\x5', '>', ' ', '\x2', '\xF7', '\xFA', '\x5', '\x1E', 
		'\x10', '\x2', '\xF8', '\xFA', '\x5', ' ', '\x11', '\x2', '\xF9', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x5', '\x38', '\x1D', '\x2', '\xFC', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\a', '\x1E', '\x2', '\x2', '\xFE', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\"', '\x2', '\x2', 
		'\x100', ';', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '!', 
		'\x2', '\x2', '\x102', '=', '\x3', '\x2', '\x2', '\x2', '\x103', '\x108', 
		'\a', '#', '\x2', '\x2', '\x104', '\x106', '\x5', '@', '!', '\x2', '\x105', 
		'\x107', '\x5', '\x42', '\"', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x10A', '\x10B', '\a', '\"', '\x2', '\x2', '\x10B', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\"', '\x2', '\x2', 
		'\x10D', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D', 'G', 'N', 'S', 'Y', 
		'`', '\x65', 'p', 'w', 'z', '\x7F', '\x8C', '\x92', '\x9B', '\xA3', '\xB1', 
		'\xB4', '\xB9', '\xBC', '\xC1', '\xC7', '\xD4', '\xDC', '\xE8', '\xEE', 
		'\xF9', '\x106', '\x108',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Suggestion.SuggestionParser
