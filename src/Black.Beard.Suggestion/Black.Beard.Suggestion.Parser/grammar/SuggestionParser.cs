//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Suggestion.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Suggestion.SuggestionParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SuggestionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, AND=38, ANDALSO=39, 
		OR=40, XOR=41, NOT=42, K_ALL=43, DIGIT=44, IDENTIFIER=45, COMMENT_INPUT=46, 
		LINE_COMMENT=47;
	public const int
		RULE_stmt_list = 0, RULE_stmt_line = 1, RULE_stmt_show_methods = 2, RULE_stmt_Set_globalParameter = 3, 
		RULE_stmt_Get_globalParameter = 4, RULE_stmt_Del_globalParameter = 5, 
		RULE_select_stmt = 6, RULE_where_stmt = 7, RULE_order_stmt = 8, RULE_facet_stmt = 9, 
		RULE_function_stmt = 10, RULE_function_args_stmt = 11, RULE_identifier_stmt = 12, 
		RULE_bind_parameter = 13, RULE_constant = 14, RULE_variable = 15, RULE_char_literal = 16, 
		RULE_string_literal = 17, RULE_numeric_literal = 18, RULE_numeric_integer_literal = 19, 
		RULE_numeric_double_literal = 20, RULE_binary_operator = 21, RULE_numeric_binary_operator = 22, 
		RULE_boolean_binary_operator = 23, RULE_unary_operator = 24, RULE_expr = 25, 
		RULE_sub_expr = 26, RULE_unary_operator_expr = 27, RULE_array_expr = 28, 
		RULE_numeric_literal_expr = 29, RULE_literal = 30, RULE_string_literal_expr = 31, 
		RULE_function_name = 32, RULE_any_name = 33, RULE_datetime_expr = 34, 
		RULE_date_expr = 35, RULE_time_expr = 36, RULE_date_sub_expr = 37, RULE_date_sep = 38;
	public static readonly string[] ruleNames = {
		"stmt_list", "stmt_line", "stmt_show_methods", "stmt_Set_globalParameter", 
		"stmt_Get_globalParameter", "stmt_Del_globalParameter", "select_stmt", 
		"where_stmt", "order_stmt", "facet_stmt", "function_stmt", "function_args_stmt", 
		"identifier_stmt", "bind_parameter", "constant", "variable", "char_literal", 
		"string_literal", "numeric_literal", "numeric_integer_literal", "numeric_double_literal", 
		"binary_operator", "numeric_binary_operator", "boolean_binary_operator", 
		"unary_operator", "expr", "sub_expr", "unary_operator_expr", "array_expr", 
		"numeric_literal_expr", "literal", "string_literal_expr", "function_name", 
		"any_name", "datetime_expr", "date_expr", "time_expr", "date_sub_expr", 
		"date_sep"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'SHOW'", "'METHODS'", "'METHOD'", "'SET'", "'='", "'GET'", 
		"'DEL'", "'WHERE'", "'ORDER BY'", "'WITH FACETS'", "','", "'('", "')'", 
		"'.'", "':'", "'$'", "'''", "''''", "'\"'", "'\"\"'", "'-'", "'+'", "'/'", 
		"'*'", "'^'", "'%'", "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'", "'['", 
		"']'", "'\\'", "'//'", "'&'", "'&&'", "'|'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "AND", "ANDALSO", "OR", "XOR", "NOT", "K_ALL", "DIGIT", "IDENTIFIER", 
		"COMMENT_INPUT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Suggestion.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SuggestionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SuggestionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SuggestionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Stmt_listContext : ParserRuleContext {
		public Stmt_lineContext[] stmt_line() {
			return GetRuleContexts<Stmt_lineContext>();
		}
		public Stmt_lineContext stmt_line(int i) {
			return GetRuleContext<Stmt_lineContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 78; Match(T__0);
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; stmt_line();
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 85; Match(T__0);
						}
						}
						State = 88;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					State = 90; stmt_line();
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 96; Match(T__0);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_lineContext : ParserRuleContext {
		public Stmt_show_methodsContext stmt_show_methods() {
			return GetRuleContext<Stmt_show_methodsContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Stmt_Set_globalParameterContext stmt_Set_globalParameter() {
			return GetRuleContext<Stmt_Set_globalParameterContext>(0);
		}
		public Stmt_Get_globalParameterContext stmt_Get_globalParameter() {
			return GetRuleContext<Stmt_Get_globalParameterContext>(0);
		}
		public Stmt_Del_globalParameterContext stmt_Del_globalParameter() {
			return GetRuleContext<Stmt_Del_globalParameterContext>(0);
		}
		public Stmt_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_lineContext stmt_line() {
		Stmt_lineContext _localctx = new Stmt_lineContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_line);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; stmt_show_methods();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; select_stmt();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; stmt_Set_globalParameter();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105; stmt_Get_globalParameter();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106; stmt_Del_globalParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_show_methodsContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Stmt_show_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_show_methods; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_show_methods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_show_methodsContext stmt_show_methods() {
		Stmt_show_methodsContext _localctx = new Stmt_show_methodsContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt_show_methods);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; Match(T__1);
				State = 110; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(T__1);
				State = 112; Match(T__3);
				State = 113; function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Set_globalParameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Stmt_Set_globalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Set_globalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Set_globalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Set_globalParameterContext stmt_Set_globalParameter() {
		Stmt_Set_globalParameterContext _localctx = new Stmt_Set_globalParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt_Set_globalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__4);
			State = 117; Match(IDENTIFIER);
			State = 118; Match(T__5);
			State = 119; literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Get_globalParameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Stmt_Get_globalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Get_globalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Get_globalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Get_globalParameterContext stmt_Get_globalParameter() {
		Stmt_Get_globalParameterContext _localctx = new Stmt_Get_globalParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt_Get_globalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(T__6);
			State = 122; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_Del_globalParameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Stmt_Del_globalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_Del_globalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_Del_globalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_Del_globalParameterContext stmt_Del_globalParameter() {
		Stmt_Del_globalParameterContext _localctx = new Stmt_Del_globalParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_stmt_Del_globalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__7);
			State = 125; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		public Order_stmtContext order_stmt() {
			return GetRuleContext<Order_stmtContext>(0);
		}
		public Facet_stmtContext facet_stmt() {
			return GetRuleContext<Facet_stmtContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; where_stmt();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 128; order_stmt();
				}
			}

			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 131; facet_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(SuggestionParser.K_ALL, 0); }
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(T__8);
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__15:
			case T__16:
			case T__17:
			case T__19:
			case T__21:
			case T__33:
			case NOT:
			case DIGIT:
			case IDENTIFIER:
				{
				State = 135; expr(0);
				}
				break;
			case K_ALL:
				{
				State = 136; Match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_stmtContext : ParserRuleContext {
		public Identifier_stmtContext identifier_stmt() {
			return GetRuleContext<Identifier_stmtContext>(0);
		}
		public Order_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_stmtContext order_stmt() {
		Order_stmtContext _localctx = new Order_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_order_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__9);
			State = 140; identifier_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Facet_stmtContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Facet_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facet_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Facet_stmtContext facet_stmt() {
		Facet_stmtContext _localctx = new Facet_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_facet_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(T__10);
			State = 143; Match(IDENTIFIER);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 144; Match(T__11);
				State = 145; Match(IDENTIFIER);
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_stmtContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_args_stmtContext function_args_stmt() {
			return GetRuleContext<Function_args_stmtContext>(0);
		}
		public Function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_stmtContext function_stmt() {
		Function_stmtContext _localctx = new Function_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; function_name();
			State = 152; Match(T__12);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__21) | (1L << T__33) | (1L << NOT) | (1L << DIGIT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 153; function_args_stmt();
				}
			}

			State = 156; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_args_stmtContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_args_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_args_stmtContext function_args_stmt() {
		Function_args_stmtContext _localctx = new Function_args_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_args_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; expr(0);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 159; Match(T__11);
				State = 160; expr(0);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_stmtContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Identifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_stmtContext identifier_stmt() {
		Identifier_stmtContext _localctx = new Identifier_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifier_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(IDENTIFIER);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 167; Match(T__14);
				State = 168; Match(IDENTIFIER);
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameterContext bind_parameter() {
		Bind_parameterContext _localctx = new Bind_parameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_bind_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__15);
			State = 175; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(T__16);
			State = 178; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__16);
			State = 181; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_literalContext : ParserRuleContext {
		public Char_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_literalContext char_literal() {
		Char_literalContext _localctx = new Char_literalContext(Context, State);
		EnterRule(_localctx, 32, RULE_char_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(T__17);
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 185; Match(T__18);
				}
				break;
			}
			State = 188; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 34, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T__19);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << AND) | (1L << ANDALSO) | (1L << OR) | (1L << XOR) | (1L << NOT) | (1L << K_ALL) | (1L << DIGIT) | (1L << IDENTIFIER) | (1L << COMMENT_INPUT) | (1L << LINE_COMMENT))) != 0)) {
				{
				State = 193;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 191;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__19) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 2:
					{
					State = 192; Match(T__20);
					}
					break;
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		public Numeric_double_literalContext numeric_double_literal() {
			return GetRuleContext<Numeric_double_literalContext>(0);
		}
		public Numeric_integer_literalContext numeric_integer_literal() {
			return GetRuleContext<Numeric_integer_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 36, RULE_numeric_literal);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; numeric_double_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; numeric_integer_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_integer_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_integer_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_integer_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_integer_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_integer_literalContext numeric_integer_literal() {
		Numeric_integer_literalContext _localctx = new Numeric_integer_literalContext(Context, State);
		EnterRule(_localctx, 38, RULE_numeric_integer_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 204; Match(T__21);
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 207; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_double_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_double_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_double_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_double_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_double_literalContext numeric_double_literal() {
		Numeric_double_literalContext _localctx = new Numeric_double_literalContext(Context, State);
		EnterRule(_localctx, 40, RULE_numeric_double_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 212; Match(T__21);
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 215; Match(DIGIT);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 220; Match(T__14);
			State = 222;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 221; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SuggestionParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SuggestionParser.OR, 0); }
		public ITerminalNode ANDALSO() { return GetToken(SuggestionParser.ANDALSO, 0); }
		public ITerminalNode XOR() { return GetToken(SuggestionParser.XOR, 0); }
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ANDALSO) | (1L << OR) | (1L << XOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_binary_operatorContext : ParserRuleContext {
		public Numeric_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_binary_operatorContext numeric_binary_operator() {
		Numeric_binary_operatorContext _localctx = new Numeric_binary_operatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_numeric_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_binary_operatorContext : ParserRuleContext {
		public Boolean_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_binary_operatorContext boolean_binary_operator() {
		Boolean_binary_operatorContext _localctx = new Boolean_binary_operatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_boolean_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(SuggestionParser.NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Numeric_literal_exprContext numeric_literal_expr() {
			return GetRuleContext<Numeric_literal_exprContext>(0);
		}
		public String_literal_exprContext string_literal_expr() {
			return GetRuleContext<String_literal_exprContext>(0);
		}
		public Char_literalContext char_literal() {
			return GetRuleContext<Char_literalContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Sub_exprContext sub_expr() {
			return GetRuleContext<Sub_exprContext>(0);
		}
		public Unary_operator_exprContext unary_operator_expr() {
			return GetRuleContext<Unary_operator_exprContext>(0);
		}
		public Function_stmtContext function_stmt() {
			return GetRuleContext<Function_stmtContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 235; numeric_literal_expr();
				}
				break;
			case 2:
				{
				State = 236; string_literal_expr();
				}
				break;
			case 3:
				{
				State = 237; char_literal();
				}
				break;
			case 4:
				{
				State = 238; constant();
				}
				break;
			case 5:
				{
				State = 239; variable();
				}
				break;
			case 6:
				{
				State = 240; array_expr();
				}
				break;
			case 7:
				{
				State = 241; bind_parameter();
				}
				break;
			case 8:
				{
				State = 242; sub_expr();
				}
				break;
			case 9:
				{
				State = 243; unary_operator_expr();
				}
				break;
			case 10:
				{
				State = 244; function_stmt();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 253;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 247;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 248; binary_operator();
					State = 249; expr(3);
					}
					} 
				}
				State = 255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Sub_exprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Sub_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_exprContext sub_expr() {
		Sub_exprContext _localctx = new Sub_exprContext(Context, State);
		EnterRule(_localctx, 52, RULE_sub_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(T__12);
			State = 257; expr(0);
			State = 258; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_exprContext : ParserRuleContext {
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Unary_operator_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_exprContext unary_operator_expr() {
		Unary_operator_exprContext _localctx = new Unary_operator_exprContext(Context, State);
		EnterRule(_localctx, 54, RULE_unary_operator_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; unary_operator();
			State = 261; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 56, RULE_array_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__33);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__21) | (1L << DIGIT))) != 0)) {
				{
				State = 264; literal();
				}
			}

			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 267; Match(T__11);
				State = 268; literal();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literal_exprContext : ParserRuleContext {
		public Numeric_literalContext[] numeric_literal() {
			return GetRuleContexts<Numeric_literalContext>();
		}
		public Numeric_literalContext numeric_literal(int i) {
			return GetRuleContext<Numeric_literalContext>(i);
		}
		public Numeric_binary_operatorContext numeric_binary_operator() {
			return GetRuleContext<Numeric_binary_operatorContext>(0);
		}
		public Numeric_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literal_exprContext numeric_literal_expr() {
		Numeric_literal_exprContext _localctx = new Numeric_literal_exprContext(Context, State);
		EnterRule(_localctx, 58, RULE_numeric_literal_expr);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; numeric_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; numeric_literal();
				State = 278; numeric_binary_operator();
				State = 279; numeric_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Char_literalContext char_literal() {
			return GetRuleContext<Char_literalContext>(0);
		}
		public Datetime_exprContext datetime_expr() {
			return GetRuleContext<Datetime_exprContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; numeric_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; string_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285; char_literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; datetime_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287; constant();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literal_exprContext : ParserRuleContext {
		public String_literalContext[] string_literal() {
			return GetRuleContexts<String_literalContext>();
		}
		public String_literalContext string_literal(int i) {
			return GetRuleContext<String_literalContext>(i);
		}
		public String_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literal_exprContext string_literal_expr() {
		String_literal_exprContext _localctx = new String_literal_exprContext(Context, State);
		EnterRule(_localctx, 62, RULE_string_literal_expr);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; string_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292; string_literal();
				State = 295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 293; Match(T__22);
					State = 294; string_literal();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 66, RULE_any_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_exprContext : ParserRuleContext {
		public Date_exprContext[] date_expr() {
			return GetRuleContexts<Date_exprContext>();
		}
		public Date_exprContext date_expr(int i) {
			return GetRuleContext<Date_exprContext>(i);
		}
		public Time_exprContext time_expr() {
			return GetRuleContext<Time_exprContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Datetime_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_exprContext datetime_expr() {
		Datetime_exprContext _localctx = new Datetime_exprContext(Context, State);
		EnterRule(_localctx, 68, RULE_datetime_expr);
		int _la;
		try {
			int _alt;
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 303; date_expr();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 306;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 308; time_expr();
					}
				}

				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 311; string_literal();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; time_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_exprContext : ParserRuleContext {
		public Date_sub_exprContext[] date_sub_expr() {
			return GetRuleContexts<Date_sub_exprContext>();
		}
		public Date_sub_exprContext date_sub_expr(int i) {
			return GetRuleContext<Date_sub_exprContext>(i);
		}
		public Date_sepContext[] date_sep() {
			return GetRuleContexts<Date_sepContext>();
		}
		public Date_sepContext date_sep(int i) {
			return GetRuleContext<Date_sepContext>(i);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Date_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_exprContext date_expr() {
		Date_exprContext _localctx = new Date_exprContext(Context, State);
		EnterRule(_localctx, 70, RULE_date_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; date_sub_expr();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21 || _la==T__35) {
				{
				{
				State = 318; date_sep();
				State = 319; date_sub_expr();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 326; string_literal();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_exprContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Time_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_exprContext time_expr() {
		Time_exprContext _localctx = new Time_exprContext(Context, State);
		EnterRule(_localctx, 72, RULE_time_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(DIGIT);
			State = 330; Match(DIGIT);
			State = 331; Match(T__15);
			State = 332; Match(DIGIT);
			State = 333; Match(DIGIT);
			State = 334; Match(T__15);
			State = 335; Match(DIGIT);
			State = 336; Match(DIGIT);
			State = 337; Match(T__14);
			State = 338; Match(DIGIT);
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIGIT) {
				{
				{
				State = 339; Match(DIGIT);
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_sub_exprContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Date_sub_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_sub_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_sub_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_sub_exprContext date_sub_expr() {
		Date_sub_exprContext _localctx = new Date_sub_exprContext(Context, State);
		EnterRule(_localctx, 74, RULE_date_sub_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(DIGIT);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 346; Match(DIGIT);
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_sepContext : ParserRuleContext {
		public Date_sepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_sep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_sep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_sepContext date_sep() {
		Date_sepContext _localctx = new Date_sepContext(Context, State);
		EnterRule(_localctx, 76, RULE_date_sep);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; Match(T__35);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; Match(T__21);
				State = 354; Match(T__36);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\x168', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2', 
		'\a', '\x2', 'R', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'U', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 'Y', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'Z', '\x3', '\x2', '\a', '\x2', '^', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x61', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x64', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'g', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'n', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'u', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x84', '\n', '\b', '\x3', '\b', '\x5', '\b', '\x87', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x8C', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x95', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x98', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x9D', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xA4', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xA7', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xAC', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xAF', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xBD', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\a', '\x13', '\xC4', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\xC7', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xCD', '\n', '\x14', '\x3', '\x15', '\x5', '\x15', 
		'\xD0', '\n', '\x15', '\x3', '\x15', '\x6', '\x15', '\xD3', '\n', '\x15', 
		'\r', '\x15', '\xE', '\x15', '\xD4', '\x3', '\x16', '\x5', '\x16', '\xD8', 
		'\n', '\x16', '\x3', '\x16', '\x6', '\x16', '\xDB', '\n', '\x16', '\r', 
		'\x16', '\xE', '\x16', '\xDC', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', 
		'\xE1', '\n', '\x16', '\r', '\x16', '\xE', '\x16', '\xE2', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xF8', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', 
		'\x1B', '\xFE', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x101', '\v', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x10C', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x110', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x113', '\v', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x11C', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x124', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x12A', '\n', '!', '\x5', '!', '\x12C', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x6', '$', '\x133', 
		'\n', '$', '\r', '$', '\xE', '$', '\x134', '\x3', '$', '\x5', '$', '\x138', 
		'\n', '$', '\x3', '$', '\x5', '$', '\x13B', '\n', '$', '\x3', '$', '\x5', 
		'$', '\x13E', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\a', '%', '\x144', '\n', '%', '\f', '%', '\xE', '%', '\x147', '\v', '%', 
		'\x3', '%', '\x5', '%', '\x14A', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x157', '\n', '&', '\f', '&', 
		'\xE', '&', '\x15A', '\v', '&', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x15E', '\n', '\'', '\f', '\'', '\xE', '\'', '\x161', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x166', '\n', '(', '\x3', '(', 
		'\x2', '\x3', '\x34', ')', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', '\x2', 
		'\a', '\x3', '\x2', '\x14', '\x14', '\x3', '\x2', '\x16', '\x16', '\x3', 
		'\x2', '(', '+', '\x3', '\x2', '\x18', '\x1D', '\x4', '\x2', '\b', '\b', 
		'\x1E', '#', '\x2', '\x176', '\x2', 'S', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x6', 't', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'v', '\x3', '\x2', '\x2', '\x2', '\n', '{', '\x3', '\x2', '\x2', 
		'\x2', '\f', '~', '\x3', '\x2', '\x2', '\x2', '\xE', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x99', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xB6', '\x3', '\x2', '\x2', '\x2', '\"', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xC0', '\x3', '\x2', '\x2', '\x2', '&', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xCF', '\x3', '\x2', '\x2', '\x2', '*', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xE4', '\x3', '\x2', '\x2', '\x2', '.', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x102', '\x3', '\x2', '\x2', '\x2', '\x38', '\x106', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x11B', '\x3', '\x2', '\x2', '\x2', '>', '\x123', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x42', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x13D', '\x3', '\x2', '\x2', '\x2', 'H', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x14B', '\x3', '\x2', '\x2', '\x2', 'L', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\a', '\x3', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', '_', '\x5', '\x4', '\x3', '\x2', 
		'W', 'Y', '\a', '\x3', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\x5', '\x4', '\x3', '\x2', ']', 'X', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x64', '\a', '\x3', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'h', 'n', '\x5', '\x6', '\x4', '\x2', 'i', 'n', '\x5', '\xE', '\b', '\x2', 
		'j', 'n', '\x5', '\b', '\x5', '\x2', 'k', 'n', '\x5', '\n', '\x6', '\x2', 
		'l', 'n', '\x5', '\f', '\a', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 
		'm', 'i', '\x3', '\x2', '\x2', '\x2', 'm', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x5', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x4', '\x2', 
		'\x2', 'p', 'u', '\a', '\x5', '\x2', '\x2', 'q', 'r', '\a', '\x4', '\x2', 
		'\x2', 'r', 's', '\a', '\x6', '\x2', '\x2', 's', 'u', '\x5', '\x42', '\"', 
		'\x2', 't', 'o', '\x3', '\x2', '\x2', '\x2', 't', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\a', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\a', '\x2', 
		'\x2', 'w', 'x', '\a', '/', '\x2', '\x2', 'x', 'y', '\a', '\b', '\x2', 
		'\x2', 'y', 'z', '\x5', '>', ' ', '\x2', 'z', '\t', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', '\t', '\x2', '\x2', '|', '}', '\a', '/', '\x2', 
		'\x2', '}', '\v', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\n', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '/', '\x2', '\x2', '\x80', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\x5', '\x10', '\t', '\x2', '\x82', 
		'\x84', '\x5', '\x12', '\n', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x87', '\x5', '\x14', '\v', '\x2', '\x86', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\xF', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\a', 
		'\v', '\x2', '\x2', '\x89', '\x8C', '\x5', '\x34', '\x1B', '\x2', '\x8A', 
		'\x8C', '\a', '-', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\f', '\x2', '\x2', '\x8E', 
		'\x8F', '\x5', '\x1A', '\xE', '\x2', '\x8F', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\r', '\x2', '\x2', '\x91', '\x96', '\a', 
		'/', '\x2', '\x2', '\x92', '\x93', '\a', '\xE', '\x2', '\x2', '\x93', 
		'\x95', '\a', '/', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x42', '\"', '\x2', '\x9A', '\x9C', '\a', 
		'\xF', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\x18', '\r', '\x2', '\x9C', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x10', '\x2', '\x2', '\x9F', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA5', '\x5', '\x34', '\x1B', '\x2', '\xA1', '\xA2', '\a', '\xE', '\x2', 
		'\x2', '\xA2', '\xA4', '\x5', '\x34', '\x1B', '\x2', '\xA3', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAD', '\a', '/', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x11', '\x2', '\x2', '\xAA', '\xAC', '\a', '/', '\x2', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x12', '\x2', '\x2', '\xB1', '\xB2', '\a', '/', '\x2', '\x2', '\xB2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x13', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '/', '\x2', '\x2', '\xB5', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x13', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', '/', '\x2', '\x2', '\xB8', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xBC', '\a', '\x14', '\x2', '\x2', '\xBA', '\xBD', '\n', '\x2', 
		'\x2', '\x2', '\xBB', '\xBD', '\a', '\x15', '\x2', '\x2', '\xBC', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x14', 
		'\x2', '\x2', '\xBF', '#', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC5', 
		'\a', '\x16', '\x2', '\x2', '\xC1', '\xC4', '\n', '\x3', '\x2', '\x2', 
		'\xC2', '\xC4', '\a', '\x17', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\a', '\x16', '\x2', '\x2', '\xC9', '%', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCD', '\x5', '*', '\x16', '\x2', '\xCB', '\xCD', '\x5', '(', '\x15', 
		'\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\'', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\a', '\x18', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD3', '\a', '.', '\x2', '\x2', '\xD2', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', ')', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD8', '\a', '\x18', '\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDB', '\a', '.', '\x2', '\x2', '\xDA', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE0', '\a', '\x11', '\x2', '\x2', '\xDF', '\xE1', '\a', '.', '\x2', 
		'\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\t', '\x4', '\x2', '\x2', '\xE5', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\t', '\x5', '\x2', '\x2', '\xE7', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\t', '\x6', '\x2', '\x2', 
		'\xE9', '\x31', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', ',', 
		'\x2', '\x2', '\xEB', '\x33', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\b', '\x1B', '\x1', '\x2', '\xED', '\xF8', '\x5', '<', '\x1F', '\x2', 
		'\xEE', '\xF8', '\x5', '@', '!', '\x2', '\xEF', '\xF8', '\x5', '\"', '\x12', 
		'\x2', '\xF0', '\xF8', '\x5', '\x1E', '\x10', '\x2', '\xF1', '\xF8', '\x5', 
		' ', '\x11', '\x2', '\xF2', '\xF8', '\x5', ':', '\x1E', '\x2', '\xF3', 
		'\xF8', '\x5', '\x1C', '\xF', '\x2', '\xF4', '\xF8', '\x5', '\x36', '\x1C', 
		'\x2', '\xF5', '\xF8', '\x5', '\x38', '\x1D', '\x2', '\xF6', '\xF8', '\x5', 
		'\x16', '\f', '\x2', '\xF7', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\f', '\x4', '\x2', '\x2', '\xFA', '\xFB', '\x5', ',', '\x17', 
		'\x2', '\xFB', '\xFC', '\x5', '\x34', '\x1B', '\x5', '\xFC', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x103', '\a', '\xF', '\x2', '\x2', '\x103', '\x104', '\x5', '\x34', '\x1B', 
		'\x2', '\x104', '\x105', '\a', '\x10', '\x2', '\x2', '\x105', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x5', '\x32', '\x1A', '\x2', 
		'\x107', '\x108', '\x5', '\x34', '\x1B', '\x2', '\x108', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10B', '\a', '$', '\x2', '\x2', '\x10A', 
		'\x10C', '\x5', '>', ' ', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '\xE', '\x2', '\x2', 
		'\x10E', '\x110', '\x5', '>', ' ', '\x2', '\x10F', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x115', '\a', '%', '\x2', '\x2', '\x115', 
		';', '\x3', '\x2', '\x2', '\x2', '\x116', '\x11C', '\x5', '&', '\x14', 
		'\x2', '\x117', '\x118', '\x5', '&', '\x14', '\x2', '\x118', '\x119', 
		'\x5', '.', '\x18', '\x2', '\x119', '\x11A', '\x5', '&', '\x14', '\x2', 
		'\x11A', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x124', '\x5', '&', '\x14', 
		'\x2', '\x11E', '\x124', '\x5', '$', '\x13', '\x2', '\x11F', '\x124', 
		'\x5', '\"', '\x12', '\x2', '\x120', '\x124', '\x5', '\x46', '$', '\x2', 
		'\x121', '\x124', '\x5', '\x1E', '\x10', '\x2', '\x122', '\x124', '\x5', 
		' ', '\x11', '\x2', '\x123', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '?', '\x3', '\x2', '\x2', '\x2', '\x125', '\x12C', '\x5', '$', 
		'\x13', '\x2', '\x126', '\x129', '\x5', '$', '\x13', '\x2', '\x127', '\x128', 
		'\a', '\x19', '\x2', '\x2', '\x128', '\x12A', '\x5', '$', '\x13', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', '\x44', '#', '\x2', '\x12E', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\a', '/', '\x2', '\x2', '\x130', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x131', '\x133', '\x5', 'H', '%', '\x2', '\x132', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x137', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x138', '\x5', 'J', '&', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\x5', '$', '\x13', '\x2', 
		'\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13E', '\x5', 'J', '&', '\x2', '\x13D', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x145', '\x5', 'L', '\'', '\x2', '\x140', 
		'\x141', '\x5', 'N', '(', '\x2', '\x141', '\x142', '\x5', 'L', '\'', '\x2', 
		'\x142', '\x144', '\x3', '\x2', '\x2', '\x2', '\x143', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x147', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x149', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x14A', '\x5', '$', '\x13', '\x2', 
		'\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', 'I', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '.', '\x2', '\x2', '\x14C', '\x14D', '\a', '.', '\x2', 
		'\x2', '\x14D', '\x14E', '\a', '\x12', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', '.', '\x2', '\x2', '\x14F', '\x150', '\a', '.', '\x2', '\x2', '\x150', 
		'\x151', '\a', '\x12', '\x2', '\x2', '\x151', '\x152', '\a', '.', '\x2', 
		'\x2', '\x152', '\x153', '\a', '.', '\x2', '\x2', '\x153', '\x154', '\a', 
		'\x11', '\x2', '\x2', '\x154', '\x158', '\a', '.', '\x2', '\x2', '\x155', 
		'\x157', '\a', '.', '\x2', '\x2', '\x156', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x158', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x159', 'K', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x158', '\x3', '\x2', 
		'\x2', '\x2', '\x15B', '\x15F', '\a', '.', '\x2', '\x2', '\x15C', '\x15E', 
		'\a', '.', '\x2', '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x161', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x166', '\a', '&', '\x2', '\x2', '\x163', '\x164', '\a', 
		'\x18', '\x2', '\x2', '\x164', '\x166', '\a', '\'', '\x2', '\x2', '\x165', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x166', 'O', '\x3', '\x2', '\x2', '\x2', ')', 'S', 'Z', '_', '\x65', 
		'm', 't', '\x83', '\x86', '\x8B', '\x96', '\x9C', '\xA5', '\xAD', '\xBC', 
		'\xC3', '\xC5', '\xCC', '\xCF', '\xD4', '\xD7', '\xDC', '\xE2', '\xF7', 
		'\xFF', '\x10B', '\x111', '\x11B', '\x123', '\x129', '\x12B', '\x134', 
		'\x137', '\x13A', '\x13D', '\x145', '\x149', '\x158', '\x15F', '\x165',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Suggestion.SuggestionParser
