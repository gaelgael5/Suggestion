//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Suggestion.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Suggestion.SuggestionParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SuggestionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		AND=25, ANDALSO=26, OR=27, XOR=28, NOT=29, K_ALL=30, K_NULL=31, K_TRUE=32, 
		K_FALSE=33, K_CURRENT_TIME=34, K_CURRENT_DATE=35, K_CURRENT_TIMESTAMP=36, 
		DIGIT=37, IDENTIFIER=38;
	public const int
		RULE_stmt_list = 0, RULE_stmt_line = 1, RULE_select_stmt = 2, RULE_where_stmt = 3, 
		RULE_order_stmt = 4, RULE_facet_stmt = 5, RULE_function_stmt = 6, RULE_function_args_stmt = 7, 
		RULE_identifier_stmt = 8, RULE_bind_parameter = 9, RULE_string_literal = 10, 
		RULE_numeric_literal = 11, RULE_numeric_integer_literal = 12, RULE_numeric_double_literal = 13, 
		RULE_function_name = 14, RULE_any_name = 15, RULE_binary_operator = 16, 
		RULE_numeric_binary_operator = 17, RULE_boolean_binary_operator = 18, 
		RULE_unary_operator = 19, RULE_expr = 20, RULE_numeric_literal_expr = 21, 
		RULE_string_literal_expr = 22, RULE_constant_literal_value = 23;
	public static readonly string[] ruleNames = {
		"stmt_list", "stmt_line", "select_stmt", "where_stmt", "order_stmt", "facet_stmt", 
		"function_stmt", "function_args_stmt", "identifier_stmt", "bind_parameter", 
		"string_literal", "numeric_literal", "numeric_integer_literal", "numeric_double_literal", 
		"function_name", "any_name", "binary_operator", "numeric_binary_operator", 
		"boolean_binary_operator", "unary_operator", "expr", "numeric_literal_expr", 
		"string_literal_expr", "constant_literal_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'WHERE'", "'ORDER BY'", "'WITH FACETS'", "','", "'('", "')'", 
		"'.'", "':'", "'''", "''''", "'-'", "'+'", "'/'", "'*'", "'^'", "'%'", 
		"'<'", "'>'", "'='", "'<='", "'>='", "'<<'", "'>>'", "'&'", "'&&'", "'|'", 
		"'||'", "'!'", "'ALL'", "'NULL'", "'TRUE'", "'FALSE'", "'CURRENT_TIME'", 
		"'CURRENT_DATE'", "'CURRENT_TIMESTAMP'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "AND", "ANDALSO", "OR", "XOR", "NOT", "K_ALL", "K_NULL", "K_TRUE", 
		"K_FALSE", "K_CURRENT_TIME", "K_CURRENT_DATE", "K_CURRENT_TIMESTAMP", 
		"DIGIT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Suggestion.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SuggestionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SuggestionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SuggestionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Stmt_listContext : ParserRuleContext {
		public Stmt_lineContext[] stmt_line() {
			return GetRuleContexts<Stmt_lineContext>();
		}
		public Stmt_lineContext stmt_line(int i) {
			return GetRuleContext<Stmt_lineContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 48; Match(T__0);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; stmt_line();
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 55; Match(T__0);
						}
						}
						State = 58;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					State = 60; stmt_line();
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 66; Match(T__0);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_lineContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Stmt_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_lineContext stmt_line() {
		Stmt_lineContext _localctx = new Stmt_lineContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		public Order_stmtContext order_stmt() {
			return GetRuleContext<Order_stmtContext>(0);
		}
		public Facet_stmtContext facet_stmt() {
			return GetRuleContext<Facet_stmtContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; where_stmt();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 75; order_stmt();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 78; facet_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(SuggestionParser.K_ALL, 0); }
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__1);
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__8:
			case T__9:
			case T__11:
			case NOT:
			case K_NULL:
			case K_TRUE:
			case K_FALSE:
			case K_CURRENT_TIME:
			case K_CURRENT_DATE:
			case K_CURRENT_TIMESTAMP:
			case DIGIT:
			case IDENTIFIER:
				{
				State = 82; expr(0);
				}
				break;
			case K_ALL:
				{
				State = 83; Match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_stmtContext : ParserRuleContext {
		public Identifier_stmtContext identifier_stmt() {
			return GetRuleContext<Identifier_stmtContext>(0);
		}
		public Order_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_stmtContext order_stmt() {
		Order_stmtContext _localctx = new Order_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_order_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(T__2);
			State = 87; identifier_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Facet_stmtContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Facet_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facet_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Facet_stmtContext facet_stmt() {
		Facet_stmtContext _localctx = new Facet_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_facet_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(T__3);
			State = 90; Match(IDENTIFIER);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 91; Match(T__4);
				State = 92; Match(IDENTIFIER);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_stmtContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_args_stmtContext function_args_stmt() {
			return GetRuleContext<Function_args_stmtContext>(0);
		}
		public Function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_stmtContext function_stmt() {
		Function_stmtContext _localctx = new Function_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; function_name();
			State = 99; Match(T__5);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << NOT) | (1L << K_NULL) | (1L << K_TRUE) | (1L << K_FALSE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIMESTAMP) | (1L << DIGIT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 100; function_args_stmt();
				}
			}

			State = 103; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_args_stmtContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_args_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_args_stmtContext function_args_stmt() {
		Function_args_stmtContext _localctx = new Function_args_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_args_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; expr(0);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 106; Match(T__4);
				State = 107; expr(0);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_stmtContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SuggestionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SuggestionParser.IDENTIFIER, i);
		}
		public Identifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_stmtContext identifier_stmt() {
		Identifier_stmtContext _localctx = new Identifier_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(IDENTIFIER);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 114; Match(T__7);
				State = 115; Match(IDENTIFIER);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameterContext bind_parameter() {
		Bind_parameterContext _localctx = new Bind_parameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_bind_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 121; Match(T__8);
			}
			State = 122; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 20, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__9);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << AND) | (1L << ANDALSO) | (1L << OR) | (1L << XOR) | (1L << NOT) | (1L << K_ALL) | (1L << K_NULL) | (1L << K_TRUE) | (1L << K_FALSE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIMESTAMP) | (1L << DIGIT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 125;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__9) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 2:
					{
					State = 126; Match(T__10);
					}
					break;
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		public Numeric_double_literalContext numeric_double_literal() {
			return GetRuleContext<Numeric_double_literalContext>(0);
		}
		public Numeric_integer_literalContext numeric_integer_literal() {
			return GetRuleContext<Numeric_integer_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 22, RULE_numeric_literal);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; numeric_double_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; numeric_integer_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_integer_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_integer_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_integer_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_integer_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_integer_literalContext numeric_integer_literal() {
		Numeric_integer_literalContext _localctx = new Numeric_integer_literalContext(Context, State);
		EnterRule(_localctx, 24, RULE_numeric_integer_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 138; Match(T__11);
				}
			}

			State = 142;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 141; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_double_literalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(SuggestionParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(SuggestionParser.DIGIT, i);
		}
		public Numeric_double_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_double_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_double_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_double_literalContext numeric_double_literal() {
		Numeric_double_literalContext _localctx = new Numeric_double_literalContext(Context, State);
		EnterRule(_localctx, 26, RULE_numeric_double_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 146; Match(T__11);
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149; Match(DIGIT);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 154; Match(T__7);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 155; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SuggestionParser.IDENTIFIER, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_any_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SuggestionParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SuggestionParser.OR, 0); }
		public ITerminalNode ANDALSO() { return GetToken(SuggestionParser.ANDALSO, 0); }
		public ITerminalNode XOR() { return GetToken(SuggestionParser.XOR, 0); }
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ANDALSO) | (1L << OR) | (1L << XOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_binary_operatorContext : ParserRuleContext {
		public Numeric_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_binary_operatorContext numeric_binary_operator() {
		Numeric_binary_operatorContext _localctx = new Numeric_binary_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_numeric_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_binary_operatorContext : ParserRuleContext {
		public Boolean_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_binary_operatorContext boolean_binary_operator() {
		Boolean_binary_operatorContext _localctx = new Boolean_binary_operatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_boolean_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(SuggestionParser.NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_unary_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Numeric_literal_exprContext numeric_literal_expr() {
			return GetRuleContext<Numeric_literal_exprContext>(0);
		}
		public String_literal_exprContext string_literal_expr() {
			return GetRuleContext<String_literal_exprContext>(0);
		}
		public Constant_literal_valueContext constant_literal_value() {
			return GetRuleContext<Constant_literal_valueContext>(0);
		}
		public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Function_stmtContext function_stmt() {
			return GetRuleContext<Function_stmtContext>(0);
		}
		public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case DIGIT:
				{
				State = 173; numeric_literal_expr();
				}
				break;
			case T__9:
				{
				State = 174; string_literal_expr();
				}
				break;
			case K_NULL:
			case K_TRUE:
			case K_FALSE:
			case K_CURRENT_TIME:
			case K_CURRENT_DATE:
			case K_CURRENT_TIMESTAMP:
				{
				State = 175; constant_literal_value();
				}
				break;
			case T__8:
				{
				State = 176; bind_parameter();
				}
				break;
			case T__5:
				{
				State = 177; Match(T__5);
				State = 178; expr(0);
				State = 179; Match(T__6);
				}
				break;
			case NOT:
				{
				State = 181; unary_operator();
				State = 182; expr(3);
				}
				break;
			case IDENTIFIER:
				{
				State = 184; function_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 187;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 188; binary_operator();
					State = 189; expr(3);
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Numeric_literal_exprContext : ParserRuleContext {
		public Numeric_literalContext[] numeric_literal() {
			return GetRuleContexts<Numeric_literalContext>();
		}
		public Numeric_literalContext numeric_literal(int i) {
			return GetRuleContext<Numeric_literalContext>(i);
		}
		public Numeric_binary_operatorContext numeric_binary_operator() {
			return GetRuleContext<Numeric_binary_operatorContext>(0);
		}
		public Numeric_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literal_exprContext numeric_literal_expr() {
		Numeric_literal_exprContext _localctx = new Numeric_literal_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_numeric_literal_expr);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; numeric_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; numeric_literal();
				State = 198; numeric_binary_operator();
				State = 199; numeric_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literal_exprContext : ParserRuleContext {
		public String_literalContext[] string_literal() {
			return GetRuleContexts<String_literalContext>();
		}
		public String_literalContext string_literal(int i) {
			return GetRuleContext<String_literalContext>(i);
		}
		public String_literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literal_exprContext string_literal_expr() {
		String_literal_exprContext _localctx = new String_literal_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_string_literal_expr);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; string_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; string_literal();
				State = 207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 205; Match(T__12);
					State = 206; string_literal();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_literal_valueContext : ParserRuleContext {
		public ITerminalNode K_NULL() { return GetToken(SuggestionParser.K_NULL, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SuggestionParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SuggestionParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SuggestionParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_TRUE() { return GetToken(SuggestionParser.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(SuggestionParser.K_FALSE, 0); }
		public Constant_literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_literal_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuggestionVisitor<TResult> typedVisitor = visitor as ISuggestionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_literal_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_literal_valueContext constant_literal_value() {
		Constant_literal_valueContext _localctx = new Constant_literal_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_constant_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_NULL) | (1L << K_TRUE) | (1L << K_FALSE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIMESTAMP))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\xD8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x6', '\x2', ';', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'<', '\x3', '\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x43', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x46', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'I', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'O', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'R', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'W', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '`', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x63', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'o', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'r', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', 'w', '\n', '\n', '\f', '\n', '\xE', '\n', 'z', '\v', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x82', '\n', '\f', '\f', '\f', '\xE', '\f', '\x85', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x8B', '\n', '\r', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', '\xE', 
		'\x3', '\xE', '\x6', '\xE', '\x91', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 
		'\x92', '\x3', '\xF', '\x5', '\xF', '\x96', '\n', '\xF', '\x3', '\xF', 
		'\x6', '\xF', '\x99', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x9A', 
		'\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\x9F', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\xA0', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xBC', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xC2', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\xC5', '\v', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xCC', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xD2', '\n', '\x18', '\x5', '\x18', '\xD4', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x3', '*', 
		'\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x2', '\a', '\x3', '\x2', '\f', '\f', '\x3', '\x2', 
		'\x1B', '\x1E', '\x3', '\x2', '\xE', '\x13', '\x3', '\x2', '\x14', '\x1A', 
		'\x3', '\x2', '!', '&', '\x2', '\xDC', '\x2', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'J', '\x3', '\x2', '\x2', '\x2', '\x6', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'S', '\x3', '\x2', '\x2', '\x2', '\n', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\f', '[', '\x3', '\x2', '\x2', '\x2', '\xE', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', '\x2', '\x12', 
		's', '\x3', '\x2', '\x2', '\x2', '\x14', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '~', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xA4', '\x3', '\x2', '\x2', '\x2', '\"', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xA8', '\x3', '\x2', '\x2', '\x2', '&', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xAC', '\x3', '\x2', '\x2', '\x2', '*', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xCB', '\x3', '\x2', '\x2', '\x2', '.', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\a', '\x3', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x41', '\x5', '\x4', '\x3', '\x2', '\x39', ';', 
		'\a', '\x3', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x5', '\x4', '\x3', '\x2', '?', ':', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\a', '\x3', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x5', 
		'\x6', '\x4', '\x2', 'K', '\x5', '\x3', '\x2', '\x2', '\x2', 'L', 'N', 
		'\x5', '\b', '\x5', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', '\f', '\a', '\x2', 'Q', 
		'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '\a', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\a', '\x4', '\x2', '\x2', 
		'T', 'W', '\x5', '*', '\x16', '\x2', 'U', 'W', '\a', ' ', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', '\t', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 
		'Y', 'Z', '\x5', '\x12', '\n', '\x2', 'Z', '\v', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '\x6', '\x2', '\x2', '\\', '\x61', '\a', '(', 
		'\x2', '\x2', ']', '^', '\a', '\a', '\x2', '\x2', '^', '`', '\a', '(', 
		'\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', 
		'\x1E', '\x10', '\x2', '\x65', 'g', '\a', '\b', '\x2', '\x2', '\x66', 
		'h', '\x5', '\x10', '\t', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '\t', '\x2', '\x2', 'j', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'k', 'p', '\x5', '*', '\x16', '\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 
		'm', 'o', '\x5', '*', '\x16', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'x', '\a', '(', '\x2', 
		'\x2', 't', 'u', '\a', '\n', '\x2', '\x2', 'u', 'w', '\a', '(', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\x13', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\a', '\v', '\x2', '\x2', '|', '}', '\a', '(', 
		'\x2', '\x2', '}', '\x15', '\x3', '\x2', '\x2', '\x2', '~', '\x83', '\a', 
		'\f', '\x2', '\x2', '\x7F', '\x82', '\n', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\a', '\r', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\f', '\x2', '\x2', '\x87', '\x17', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8B', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x8B', '\x5', '\x1A', '\xE', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8E', '\a', '\xE', '\x2', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x91', '\a', '\'', '\x2', '\x2', '\x90', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x96', '\a', '\xE', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x99', '\a', '\'', '\x2', '\x2', '\x98', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\a', '\n', '\x2', '\x2', '\x9D', '\x9F', '\a', '\'', '\x2', '\x2', 
		'\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x5', ' ', '\x11', '\x2', '\xA3', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '(', '\x2', '\x2', '\xA5', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', '\x3', '\x2', '\x2', '\xA7', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\t', '\x4', '\x2', '\x2', 
		'\xA9', '%', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\t', '\x5', 
		'\x2', '\x2', '\xAB', '\'', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\a', '\x1F', '\x2', '\x2', '\xAD', ')', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\b', '\x16', '\x1', '\x2', '\xAF', '\xBC', '\x5', ',', '\x17', 
		'\x2', '\xB0', '\xBC', '\x5', '.', '\x18', '\x2', '\xB1', '\xBC', '\x5', 
		'\x30', '\x19', '\x2', '\xB2', '\xBC', '\x5', '\x14', '\v', '\x2', '\xB3', 
		'\xB4', '\a', '\b', '\x2', '\x2', '\xB4', '\xB5', '\x5', '*', '\x16', 
		'\x2', '\xB5', '\xB6', '\a', '\t', '\x2', '\x2', '\xB6', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', '(', '\x15', '\x2', '\xB8', 
		'\xB9', '\x5', '*', '\x16', '\x5', '\xB9', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBC', '\x5', '\xE', '\b', '\x2', '\xBB', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\f', '\x4', '\x2', 
		'\x2', '\xBE', '\xBF', '\x5', '\"', '\x12', '\x2', '\xBF', '\xC0', '\x5', 
		'*', '\x16', '\x5', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '+', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xCC', '\x5', '\x18', '\r', 
		'\x2', '\xC7', '\xC8', '\x5', '\x18', '\r', '\x2', '\xC8', '\xC9', '\x5', 
		'$', '\x13', '\x2', '\xC9', '\xCA', '\x5', '\x18', '\r', '\x2', '\xCA', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCC', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xD4', '\x5', '\x16', '\f', '\x2', '\xCE', 
		'\xD1', '\x5', '\x16', '\f', '\x2', '\xCF', '\xD0', '\a', '\xF', '\x2', 
		'\x2', '\xD0', '\xD2', '\x5', '\x16', '\f', '\x2', '\xD1', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\t', '\x6', '\x2', '\x2', '\xD6', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x35', '<', '\x41', 'G', 
		'N', 'Q', 'V', '\x61', 'g', 'p', 'x', '\x81', '\x83', '\x8A', '\x8D', 
		'\x92', '\x95', '\x9A', '\xA0', '\xBB', '\xC3', '\xCB', '\xD1', '\xD3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Suggestion.SuggestionParser
